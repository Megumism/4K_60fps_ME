//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and Huali.                                                         
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: S-2021.12                                
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : hu55npkb1p11asdrl32ksa03p1                    
//  Platform           : Linux3.10.0-1160.49.1.el7.x86_64              
//                     : #1 SMP Tue Nov 30 15:51:32 UTC 2021x86_64     
//  Date of Generation : Fri Feb 18 10:17:53 CST 2022                  
//                                                                     
//---------------------------------------------------------------------
//   --------------------------------------------------------------     
//                       Template Revision : 3.7.8                      
//   --------------------------------------------------------------     
//                      * Synchronous, 1-Port SRAM *                  
//             * Verilog Testbench ( Functional & Timing ) *          
// * Verilog Testbench for comparison of Behavioral verilog & Behavioral VHDL models * 
//                THIS IS A SYNCHRONOUS 1-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:asdrlspkb1p64x16cm2sw0                               
//   Memory Size:64 words x 16 bits                                   
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   Q[15:0]                          
//               Input Ports:                                         
//                                   ADR[5:0]                         
//                                   D[15:0]                          
//                                   WE                               
//                                   ME                               
//                                   CLK                              
//                                   TEST1                            
//                                   RM[3:0]                          
//                                   RME                              

`timescale 1 ns / 1 ps 
module test;

wire [15:0] Q;
wire [15:0] Q_BEHAV;
reg [5:0] ADR;
reg [15:0] D;
reg WE;
reg ME;
reg CLK;
reg TEST1;
reg [3:0] RM;
reg RME;
integer test_status;
reg [15:0]  mem_1_content ;
reg [15:0]  mem_0_content ;
integer wem_cnt ;
integer i,ri,rj,j,lc,ld;
integer loop_num;
integer test_num;
integer err_cnt_test;
integer err_cnt;
integer simul_clk;
reg Q_tmp ;
reg flagrtl;
 
integer temp_addr;
reg flag_ignore_read_addx;
asdrlspkb1p64x16cm2sw0_behav top_behav (  .Q( Q_BEHAV), .ADR( ADR), .D( D), .WE( WE), .ME( ME), .CLK( CLK), .TEST1( TEST1), .RM( RM), .RME( RME) );
asdrlspkb1p64x16cm2sw0 top_struct (  .Q( Q), .ADR( ADR), .D( D), .WE( WE), .ME( ME), .CLK( CLK), .TEST1( TEST1), .RM( RM), .RME( RME) );
`define True    1'b1
`define False   1'b0
`define Mid     1'bx
`define Highz   1'bz

initial begin
    //$vcdplusfile("waves.vpd");
    //$vcdpluson;
    //$shm_open("waves.shm");
    //$shm_probe("AC");
    //$sdf_annotate( "asdrlspkb1p64x16cm2sw0.sdf");
end



reg [15:0] OP_Q;

task compare_Q;
  output [15:0] OP_Q;
  input [15:0] Q;
  input [15:0] Q_BEHAV;

    if ( Q === 16'bz && Q_BEHAV === 16'bz )
      OP_Q = 16'b0;
    else if ( Q === 16'bx && Q_BEHAV === 16'bx )
      OP_Q = 16'b0;
    else begin
      for ( i = 0; i <= 15; i = i + 1 ) begin
         OP_Q[i] = (((Q_BEHAV[i] === 1'bx && Q[i] === 1'bx) || ( Q_BEHAV[i] === 1'bz && Q[i] === 1'bz))?0:(Q_BEHAV[i] ^ Q[i]));
      end
    end
endtask

always @( Q or Q_BEHAV )
begin
#0;
    if ( (|( Q ^ Q )) == 0 && (|( Q_BEHAV ^ Q_BEHAV )) == 0 )
    begin
       #0.001 compare_Q ( OP_Q, Q, Q_BEHAV );
    end
    else if ( Q === 16'bz && Q_BEHAV === 16'bz )
      OP_Q = 16'b0;
    else if ( Q === 16'bx && Q_BEHAV === 16'bx  )
      OP_Q = 16'b0;
    else 
    begin
      OP_Q = 16'b0;
      #0.001 compare_Q ( OP_Q, Q, Q_BEHAV );
    end
end

always @(OP_Q)
begin
  if ( OP_Q !== 16'b0 )
   begin
     test_status = test_status + 1;
     $display( $realtime, , "ERROR_MODEL: Q = %h, Q_BEHAV = %h", Q, Q_BEHAV );
   end
   else
   begin
     $display( $realtime, , "OP_Q = %h", OP_Q );
   end
end

initial
   begin
    `ifdef VIRAGE_FAST_VERILOG
      flagrtl = 1;
    `else
      `ifdef rtlmodel
          flagrtl = 1;
      `else
          flagrtl = 0;
      `endif  
    `endif
      `ifdef  virage_ignore_read_addx
         flag_ignore_read_addx = 0;
      `else
         flag_ignore_read_addx = 1;
      `endif
       simul_clk = 0 ;
       test_num = 0;
       test_status = 0;
       OP_Q = 0;
       ADR = {6{1'b0}};
       D = {16{1'b0}};
       WE = 1'b0;
       ME = 1'b0;
       CLK = 1'b0;
       TEST1 = 1'b0;
       RM = {4{1'b0}};
       RME = 1'b0;
   end
initial begin
    CLK = 1'b0;
end

reg [2 : 0] sdata;

reg temp_clk;
initial
begin
 temp_clk = 0;
 sdata[0] = 1'b0;
 sdata[1] = 1'b1;
 sdata[2] = 1'bX;
end

always #35 temp_clk = ~temp_clk;

// timing-always

always begin
    #40
    CLK = ~CLK;

end


// timing-task
task write_mem_a;
 integer j;
 begin
  @(negedge CLK)

   @(negedge CLK) begin
    ME = 1'b1;
   end
  for ( j=0; j<= 63; j= j+1) begin
   @(negedge CLK) begin
     WE = 1'b1;
     ADR = j;
     D = j;
  end
  @(posedge CLK) begin
     #0.06; 
     WE = 1'b0;
  end
  end
 end
endtask

task write_mem_a_1;
 integer j;   
 begin    
  @(negedge CLK) begin
    ME = 1'b1;
    D = 16'b1111111111111111;
   end
  for ( j=0; j<= 63; j= j+1) begin
  @(negedge CLK) begin
     WE = 1'b1;
     ADR = j;
  end
  @(posedge CLK) begin
     #0.06;
     WE = 1'b0;
  end
  end
 end
endtask

task write_mem_a_loc;
 input [5:0] loc_adr;
 input [15:0] loc_data;
 begin
  @(negedge CLK)
   @(negedge CLK) begin
   ME = 1'b1;
  end
   @(negedge CLK) begin
   WE = 1'b1;
   ADR = loc_adr;
   D = loc_data;
  end
  @(posedge CLK) begin
     #0.06;
     WE = 1'b0;
  end
 end
endtask  


task read_mem_compare_a;
 integer j;
 integer data;
 begin
  data = 0;
  err_cnt = 0;
  @(negedge CLK)
   @(negedge CLK) begin
    ME = 1'b1; 
  end
  for ( j=0; j<= 63; j= j+1) begin
   @(negedge CLK)
   ADR = j;
   @(posedge CLK) begin
   #0.448;
   if (Q_BEHAV === 16'bx) begin
    err_cnt = err_cnt + 1;
    test_status = test_status + 1;
    $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV, data, $time);
    $display ("\n@%t            FAIL\n", $time);
  end
  else if (Q_BEHAV != data) begin
    err_cnt = err_cnt + 1;
    test_status = test_status + 1;
    $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV, data, $time);
    $display ("\n@%t            FAIL\n", $time);
    end
  data = data + 1;
  if (data > 16'b1111111111111111) data = 0;
 end
 end
end
endtask

task read_mem_a_loc;
 input [5:0] loc_adr;
 input [15:0] loc_data;
 begin   
  err_cnt = 0;

  @(negedge CLK)

  @(negedge CLK) begin
  ME = 1'b1;
  ADR = loc_adr;
  end
  @(posedge CLK) begin
    if (RME === 1'b1)
    begin
      if(RM === 4'd0)
        #0.764;
      else if(RM === 4'd1)
        #0.505;
      else if(RM === 4'd2)
        #0.448;
      else if(RM === 4'd3)
        #0.444;
    end
      else
   #0.448;
   if (Q_BEHAV === 16'bx) begin
    err_cnt = err_cnt + 1;
    test_status = test_status + 1;
    $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV, loc_data, $time);
    $display ("\n@%t            FAIL\n", $time);
   end
   else if (Q_BEHAV != loc_data) begin
    err_cnt = err_cnt + 1;
    test_status = test_status + 1;
    $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV, loc_data, $time);
    $display ("\n@%t            FAIL\n", $time);
   end
  end
 end
endtask


task read_mem_a_CL;
  input [5:0] loc_adr;
  input [15:0] loc_data;
  begin 
    err_cnt = 0;
    @(negedge CLK)
    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = loc_adr;
    end
    @(posedge CLK)
    begin
      #0.448
      if (Q_BEHAV !== 16'bx)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h attime %t ",ADR, Q_BEHAV, loc_data, $time);
        $display ("\n@%t            FAIL\n", $time);
      end
      else if (Q_BEHAV == loc_data)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h attime %t ",ADR, Q_BEHAV, loc_data, $time);
        $display ("\n@%t            FAIL\n", $time);
      end 
  end
  end
endtask


task read_mem_compare_a_X;
 integer j;
 begin
  err_cnt = 0;


  @(negedge CLK) begin
   ME = 1'b1;
  end
  for ( j=0; j<= 63; j= j+1) begin
  @(negedge CLK)
   ADR = j;
  @(posedge CLK) begin
   #0.448;
   if (Q_BEHAV !== 16'bx) begin
    err_cnt = err_cnt + 1;
    test_status = test_status + 1;
   $display ("ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = 16'bx at time %t  ",ADR, Q_BEHAV, $time);
   $display ("\n@%t            FAIL\n", $time);
   end
  end
  end 
 end
endtask 

//flow
//initialize all variables to 0
//then call write and read task.

initial begin
    ME   = 1'b0;
    WE   = 1'b0;
    D   = 16'b1111111111111111;
    TEST1   = 1'b0; 
     RM = 4'b0010;
    ADR = 63;
    @(negedge CLK)
    WE   = 1'b1;
    @(negedge CLK)
    ME = 1'b0;
    WE = 1'b0;
    @(negedge CLK)
    ME = 1'b1;
    WE = 1'b1;
    @(negedge CLK)
    ME = 1'b0;
    WE = 1'b0;
    #20;
    @(negedge CLK)
    ME = 1'b1;
    @(negedge CLK)
    ME = 1'b0;
    @(negedge CLK)
    ME = 1'b1;
    test_status = 0;
    $display ("\n#######################################################################");
    test_num = 1;

    $display( "\n\n@%t TEST: %d --------- Memory  write through port A------- \n\n", $time, test_num);
    write_mem_a;
    $display ("\n#######################################################################");
    test_num = 2;

    $display( "\n\n@%t TEST: %d --------- Memory  read through port A ------- \n\n", $time, test_num); 
    read_mem_compare_a;
    if ( err_cnt != 0 )
     begin
     test_status = test_status + 1;
    $display( "\n\n@%t          --------- Memory  read through port A unsuccessful------- \n\n", $time); 
     end
    else
    $display( "\n\n@%t          --------- Memory  read through port A successful------- \n\n", $time); 

    #10;

    write_mem_a;



    $display ("\n#######################################################################");
    test_num = 3;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on D (Read mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd0;
    D   = 16'b1111111111111111;
     #39.79
     D = ~ D;
     end
    @(posedge CLK) begin
    #0.448
    if (Q_BEHAV !== 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tdc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tdc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
    $display ("\n#######################################################################");
    test_num = 4;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on D (Read mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd0;
    #39.791
    D = ~ D;
    end
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV !== 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tdc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tdc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
    $display ("\n#######################################################################");
    test_num = 5;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on D (Read mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd0;
    D   = 16'd0;
    end
    @(posedge CLK)
    #0.049
    D = ~ D;
   @(posedge CLK) begin
    #0.448
    if (Q_BEHAV !== 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcdx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcdx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end  
    #10;

    $display ("\n#######################################################################");
    test_num = 6;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on D (Read mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd0;
    end
    @(posedge CLK)
    #0.048
     D = ~ D;
    #0.4; 
    if (Q_BEHAV !== 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcdx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcdx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
    $display ("\n#######################################################################");
    test_num = 7;
      $display( "\n\n@%t TEST: %d --- Synchronous CLK vs D event during (Read mode) --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    end
    @(posedge CLK) begin
    D = ~ D;
    #0.448;
    if (Q_BEHAV === 16'd1)
         begin
      $display ("\n@%t            Synchronous CLK vs D event modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Synchronous CLK vs D event not modelled effectivel", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end
    #10;
    $display ("\n#######################################################################");
    test_num = 8;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on D (Write mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    ADR = 6'd0;
    D   = 16'b1111111111111111;
     #39.79
     D = ~ D;
     end
    #5;
    WE = 1'b0;
     read_mem_a_loc(6'd0, 16'd0);
     if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tdc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tdc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
    $display ("\n#######################################################################");
    test_num = 9;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on D (Write mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd0;
    WE = 1'b1;
    #39.791
    D = ~ D;
    end
    #5;
    WE = 1'b0;
    ADR = 6'd1;
    @(posedge CLK)
    #5;
    ADR = 6'd0;
    @(posedge CLK) begin
     #0.448
     if (Q_BEHAV !== 16'bx) 
      begin
       test_status = test_status + 1;
       $display ("\n@%t            ERROR_MODEL: D Setup violation during write does not corrupt current location", $time);
       $display ("\n@%t            FAIL\n", $time);
      end
     else
       begin
       $display ("\n@%t            D Setup violation during write corrupts current location", $time);
       $display ("\n@%t            PASS\n", $time);
      end
     end
    #10;
   write_mem_a_loc(6'd0, 16'd0);
    $display ("\n#######################################################################");
    test_num = 10;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on D (Write mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    ADR = 6'd0;
    D   = 16'd0;
    end
    @(posedge CLK)
    #0.049
    D = ~ D;
    #5;
    WE = 1'b0;
     read_mem_a_loc(6'd0, 16'd0);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcdx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcdx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;

    $display ("\n#######################################################################");
    test_num = 11;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on D (Write mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd0;
    WE = 1'b1;
    end
    @(posedge CLK)
    #0.048
     D = ~ D;
    #5;
    WE = 1'b0;
    ADR = 6'd1;
    @(posedge CLK)
    #5;
    ADR = 6'd0;
    @(posedge CLK) begin
     #0.448
     if (Q_BEHAV !== 16'bx)
      begin
       test_status = test_status + 1;
       $display ("\n@%t            ERROR_MODEL: D Hold violation during write does not corrupt current location", $time);
       $display ("\n@%t            FAIL\n", $time);
      end
     else
       begin
       $display ("\n@%t            D Hold violation during write corrupts current location", $time);
       $display ("\n@%t            PASS\n", $time);
      end
     end 
    #10;
   write_mem_a_loc(6'd0, 16'd0);
    $display ("\n#######################################################################");
    test_num = 12;
      $display( "\n\n@%t TEST: %d --- Synchronous CLK vs D event during (Write mode) --- \n\n", $time, test_num)
;
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    WE = 1'b1;
    end
    @(posedge CLK) begin
    D = ~ D;
    end
    #5;
    WE = 1'b0;
    ADR = 6'd0;
    @(posedge CLK)
    #5;
    ADR = 6'd1;
    @(posedge CLK) begin
     #0.448
     if (Q_BEHAV !== 16'bx)
      begin
       test_status = test_status + 1;
       $display ("\n@%t            ERROR_MODEL: Synchronous CLK vs D event during Write mode does not corrupt current location",
$time);
       $display ("\n@%t            FAIL\n", $time);
      end
     else
       begin
       $display ("\n@%t            Synchronous CLK vs D event during Write mode corrupts current location", $time);
       $display ("\n@%t            PASS\n", $time);
      end
     end 
    #10;
   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 13;
    $display( "\n\n@%t TEST: %d --- X handling of D in (Write mode) --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    D = 16'd1;
    WE = 1'b1;
     #5
    D = 16'bx;
    end
    @(posedge CLK) begin
    end  
    #5;
    WE = 1'b0;
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
      $display ("\n@%t            Invalid D modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid D not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end
    #5;
   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 14;
    $display( "\n\n@%t TEST: %d --- X handling of D in (Write mode) --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    D = 16'd1;
    WE = 1'b1;
    end
    @(negedge CLK);
     #5
     D = {{15{1'b0}},1'bx};
    @(posedge CLK) begin
    end  
    #5;
    WE = 1'b0;
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === D)
      begin
      $display ("\n@%t            Invalid D modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid D not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end
    #5;
   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 15;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ADR (Read mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    #39.692
    ADR = 6'd0;
    end
    @(posedge CLK) begin
    #0.448
    if (Q_BEHAV !== 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tac modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tac is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
    $display ("\n#######################################################################");
    test_num = 16;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on ADR (Read mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    #39.693
    ADR = ~ ADR;
    end
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tac modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tac is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #5;
     read_mem_compare_a_X;
    if (err_cnt == 0)
     begin
      $display ("\n@%t            ADR Setup violation during read  corrupts entire memory", $time); 
      $display ("\n@%t            PASS\n", $time); 
      end
     else
      begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: ADR Setup violation during read does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time); 
      end
   write_mem_a;
    @(negedge CLK)
    $display ("\n#######################################################################");
    test_num = 17;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ADR (Read mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    end
   @(posedge CLK) 
   #0.069
    ADR = 6'd0;
   @(posedge CLK) begin
    #0.448
    if (Q_BEHAV !== 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcax modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcax is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
 
    $display ("\n#######################################################################");
    test_num = 18;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on ADR (Read mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    end
    @(posedge CLK) begin
    #0.068
    ADR = ~ ADR;
     #0.38; 
     if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tac modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tac is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #5;
     read_mem_compare_a_X;
    if (err_cnt == 0)
     begin
      $display ("\n@%t            ADR Setup Hold during read  corrupts entire memory", $time); 
      $display ("\n@%t            PASS\n", $time); 
      end
     else
      begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: ADR Hold violation during read does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time); 
      end
   write_mem_a;
    #10;
    @(negedge CLK)
    $display ("\n#######################################################################");
    test_num = 19;
      $display( "\n\n@%t TEST: %d --- Synchronous CLK vs ADR event during (Read mode) --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    end
    @(posedge CLK) begin
    ADR = 6'd1;
     #0.448;
    if (Q_BEHAV === 16'bx)
         begin
      $display ("\n@%t            Synchronous CLK vs ADR event modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Synchronous CLK vs ADR event not modelled effectivel", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end
    #5;
     read_mem_compare_a_X;
    if (err_cnt == 0)
     begin
      $display ("\n@%t            Synchronous ADR vs CLK during Read corrupt the entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
       test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Synchronous ADR vs CLK during Read doesn't corrupt the entire memory", $time);
      $display ("\n@%t            FAIL\n", $time); 
     end
   write_mem_a;
    #10;
    $display ("\n#######################################################################");
    test_num = 20;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ADR (Write mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    D  = 16'd0;
    WE = 1'b1;
    #39.692
    ADR = 6'd0;
    end
    #5;
    WE = 1'b0;
     read_mem_compare_a;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tac modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tac is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
    $display ("\n#######################################################################");
    test_num = 21;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on ADR (Write mode)--- \n\n", $time, test_num);

    @(negedge CLK)
    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    #39.693
    ADR = ~ ADR;
    end
    #5;
    WE = 1'b0;
     read_mem_compare_a_X;
    if (err_cnt == 0)
     begin
      $display ("\n@%t            ADR Setup violation during write corrupts entire memory", $time); 
      $display ("\n@%t            PASS\n", $time); 
      end
     else
      begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: ADR Setup violation during write does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time); 
      end
    #10;
   write_mem_a;
    $display ("\n#######################################################################");
    test_num = 22;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on ADR (Write mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    D = 16'd1;
    WE = 1'b1;
    end
    @(posedge CLK) fork
    #0.069
    ADR = 6'd0;
    #5
    WE = 1'b0;
    join
    #5;
     read_mem_compare_a;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcax modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcax is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
 
    $display ("\n#######################################################################");
    test_num = 23;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on ADR (Write mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    end
    @(posedge CLK) fork
    #0.059 WE = 1'b0;
    #0.068
    ADR = ~ ADR;
    join
    #0.38; 
    #5;
     read_mem_compare_a_X;
    if (err_cnt == 0)
     begin
      $display ("\n@%t            ADR Hold violation during write corrupts entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
      end
     else
      begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: ADR Hold violation during write does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
      end
    #10;
   write_mem_a;
    $display ("\n#######################################################################");
    test_num = 24;
      $display( "\n\n@%t TEST: %d --- Synchronous CLK vs ADR event during (Write mode) --- \n\n", $time, test_num)
;
    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    end
    @(posedge CLK) begin
    ADR = 6'd1;
     #0.448;
    end
    #5;
    WE = 1'b0;
     read_mem_compare_a_X;
    if (err_cnt == 0)
     begin
      $display ("\n@%t            Synchronous CLK vs ADR event during Write mode corrupts entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
      end
     else
      begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Synchronous CLK vs ADR event during Write mode does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
      end
    #10;
   write_mem_a;
    $display ("\n#######################################################################");
    test_num = 25;
    $display( "\n\n@%t TEST: %d --- X handling of ADR --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'bx1;
    WE = 1'b1;
    end
    @(posedge CLK) 
    #5;
    WE = 1'b0;
    ADR = 6'b1;
    read_mem_compare_a_X;
    if ( err_cnt == 0)
     begin
      $display ("\n@%t            Invalid Address corrupts entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid Address does not corrupt memory", $time);
      $display ("\n@%t            FAIL\n", $time);
     end
    #10;
   write_mem_a;
  $display ("\n#######################################################################");
  test_num = 26;
  $display( "\n\n@%t TEST: %d --- X handling of ADR, WE and D --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'bx1;
    WE = 1'bx;
    D   = 16'bx;
    end
    @(posedge CLK) 
    @(negedge CLK);
    WE = 1'b0;
    D   = 16'b0;
    ADR = 6'b1;
    read_mem_compare_a_X;
    if ( err_cnt == 0)
     begin
      $display ("\n@%t            Invalid Address, Write and Data corrupt the entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid Address, Write and Data doesn't corrupt the entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
     end
    @(negedge CLK);
     write_mem_a;
  $display ("\n#######################################################################");
  test_num = 27;
  $display( "\n\n@%t TEST: %d --- X handling of ADR and D --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'bx1;
    WE = 1'b1;
    D   = 16'bx;
    end
    @(posedge CLK) 
    @(negedge CLK);
    WE = 1'b0;
    D   = 16'b0;
    ADR = 6'b1;
    read_mem_compare_a_X;
    if ( err_cnt == 0)
     begin
      $display ("\n@%t            Invalid Address, Data in write mode corrupt the entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid Address and Data in write mode doesn't corrupt the entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
     end
    @(negedge CLK);
     write_mem_a;
   write_mem_a;


    $display ("\n#######################################################################");
    test_num = 28;
    $display( "\n\n@%t TEST: %d --- Driving Invalid Address through Port A, Memory inactive --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b0;
    ADR = 6'bx1;
    WE = 1'b1;
    end
    @(posedge CLK) 
    #5;
    WE = 1'b0;
    ADR = 6'b1;
    @(posedge CLK) 
    read_mem_compare_a;
    if ( err_cnt != 0)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid Address with Memory inactive corrupts entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
     end
    else
     begin
      $display ("\n@%t            Invalid Address with Memory inactive does not corrupt memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end
    #10;

    $display ("\n#######################################################################");
    test_num = 29;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ME (Read mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b0;
    ADR = 0;
    end
    @(negedge CLK) 
    #39.675
    ME = 1'b1;
    @(posedge CLK) begin 
     #0.448
     if(Q_BEHAV !== 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;

    $display ("\n#######################################################################");
    test_num = 30;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on ME (Read mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b0;
    #39.675999999999995
    ME = 1'b1;
    end
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end


    read_mem_compare_a_X;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            ME Setup violation during write corrupts entire memory", $time);
        $display ("\n@%t            PASS\n", $time);
      end
    else
      begin
        test_status = test_status + 1;
        $display ("\n@%t            ERROR_MODEL: ME Setup violation during write does not corrupt entire memory", $time);
        $display ("\n@%t            FAIL\n", $time);
      end
    end

    #10;
    write_mem_a;

    $display ("\n#######################################################################");
    test_num = 31;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on ME (Write mode) --- \n\n", $time, test_num);
    @(negedge CLK)
    D = 0;
    @(negedge CLK) begin
    ME = 1'b0;
    ADR = 0;
    WE = 1'b1;
    end
    @(negedge CLK) 
    #39.675
    ME = 1'b1;
    #5;
    WE = 1'b0;
     read_mem_compare_a;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;

    $display ("\n#######################################################################");
    test_num = 32;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on ME (Write mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b0;
    WE = 1'b1;
    #39.675999999999995
    ME = 1'b1;
    end
    @(negedge CLK);
    WE = 1'b0;
     read_mem_compare_a_X;
    if (err_cnt == 0)
     begin
      $display ("\n@%t            ME Setup violation during write corrupts entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
      end
     else
      begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: ME Setup violation during write does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
      end
    #10;

   write_mem_a;

     read_mem_compare_a;
    $display ("\n#######################################################################");
    test_num = 33;
    $display( "\n\n@%t TEST: %d --- X handling of ME in (Write mode) --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'bx;
    WE = 1'b1;
    end
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV !== 16'bx)
      begin
      $display ("\n@%t            Invalid ME modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid ME not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end 
    #10;
    ME = 1'b1;
    WE = 1'b0;
    read_mem_compare_a_X;
    if ( err_cnt == 0)
     begin 
      $display ("\n@%t            Invalid ME during write corrupts entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid ME during write does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
     end
       
   write_mem_a;
    $display ("\n#######################################################################");
    test_num = 34;
    $display( "\n\n@%t TEST: %d --- X handling of ME in (Read mode) --- \n\n", $time, test_num);

    @(negedge CLK)
    ME = 1'bx;
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
       $display ("\n@%t            Invalid ME during read handled properly", $time);
       $display ("\n@%t            PASS\n", $time);
      end
     else
      begin
       test_status = test_status + 1;
       $display ("\n@%t            ERROR_MODEL: Invalid ME during read not handled properly", $time);
       $display ("\n@%t            FAIL\n", $time);
      end
    end

    #10;
    ME = 1'b1;
   if (flag_ignore_read_addx == 1)
   begin // flag_ignore_read_addx
    read_mem_compare_a_X;
    if ( err_cnt == 0)
     begin
      $display ("\n@%t            Invalid ME during read  corrupt entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end 
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid ME during read not handled properly", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 
   end // flag_ignore_read_addx
     
   write_mem_a;
    $display ("\n#######################################################################");
    test_num = 35;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on WE --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 6'd1;
    D   = 16'd1;
    #39.726
    WE = 1'b1;
    end
     #5;
     WE = 1'b0;
     read_mem_a_loc(6'd1, 16'd1);
     if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Twc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Twc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

     #10;

    $display ("\n#######################################################################");
    test_num = 36;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on WE --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 6'd1;
    #39.727
    WE = 1'b1;
    end
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Twc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Twc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
    WE = 1'b0;

   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 37;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on WE --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 6'd1;
    D   = 16'd1;
    end
    @(posedge CLK)
     #0.059
     WE = 1'b1;
     #5;
     WE = 1'b0;
     read_mem_a_loc(6'd1, 16'd1);
     if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcwx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcwx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
    $display ("\n#######################################################################");
    test_num = 38;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on WE --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    ADR = 6'd1;
    end
    @(posedge CLK)
    #0.057999999999999996
    WE = 1'b0;
    #0.39; 
    if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcwx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcwx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 39;
      $display( "\n\n@%t TEST: %d --- Synchronous CLK vs WE event during (Read mode) --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    WE = 1'b0;
    end
    @(posedge CLK) begin
    WE = 1'b1;
    #0.448; 
    if (Q_BEHAV === 16'bx)
         begin
      $display ("\n@%t            Synchronous CLK vs WE event modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Synchronous CLK vs WE event not modelled effectivel", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end 
    #10;
    WE = 1'b0;
    ADR = 6'd0;
    @(posedge CLK)
    #5;
    ADR = 6'd1;
    @(posedge CLK) begin
     #0.448
     if (Q_BEHAV !== 16'bx)
      begin
       test_status = test_status + 1;
       $display ("\n@%t            ERROR_MODEL: Synchronous CLK vs WE event during Read mode does not corrupt current location",
$time);
       $display ("\n@%t            FAIL\n", $time);
      end
     else
       begin
       $display ("\n@%t            Synchronous CLK vs WE event during Read mode corrupts current location", $time);
       $display ("\n@%t            PASS\n", $time);
      end
     end
    #10;

   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 40;
      $display( "\n\n@%t TEST: %d --- Synchronous CLK vs WE event during (Write mode) --- \n\n", $time, test_num)
;
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    WE = 1'b1;
    end
    @(posedge CLK) begin
    WE = 1'b0;
    #0.448;
    if (Q_BEHAV === 16'bx)
         begin
      $display ("\n@%t            Synchronous CLK vs WE event modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Synchronous CLK vs WE event not modelled effectivel", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end 
    #10;
    ADR = 6'd0;
    @(posedge CLK)
    #5;
    ADR = 6'd1;
    @(posedge CLK) begin
     #0.448
     if (Q_BEHAV !== 16'bx)
      begin
       test_status = test_status + 1;
       $display ("\n@%t            ERROR_MODEL: Synchronous CLK vs WE event during Write mode does not corrupt current location",
$time);
       $display ("\n@%t            FAIL\n", $time);
      end
     else
       begin
       $display ("\n@%t            Synchronous CLK vs WE event during Write mode corrupts current location", $time);
       $display ("\n@%t            PASS\n", $time);
      end
     end
    #10;
 
   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 41;
    $display( "\n\n@%t TEST: %d --- X handling of WE in (Write mode) --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    D = 16'd1;
    WE = 1'b1;
    end
    @(posedge CLK)

    @(negedge CLK)
    WE = 1'bx;
    @(posedge CLK) begin
    #0.448
    if ( Q_BEHAV === 16'bx) 
      begin
      $display ("\n@%t            Invalid WE modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid WE not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end
    WE = 1'b0;
    @(posedge CLK) begin
    #0.448
    if ( Q_BEHAV === 16'bx)
     begin
      $display ("\n@%t            Invalid WE corrupts the current location", $time); 
      $display ("\n@%t            PASS\n", $time); 
     end 
    else 
     begin 
      test_status = test_status + 1; 
      $display ("\n@%t            ERROR_MODEL: Invalid WE does not corrupt the current location", $time); 
      $display ("\n@%t            FAIL\n", $time);
     end 
    end
  #10;
   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 42;
    $display( "\n\n@%t TEST: %d --- X handling of WE in (Read mode) --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    WE = 1'b0;
    end
    @(posedge CLK)

    @(negedge CLK)
    WE = 1'bx;
    @(posedge CLK) begin
    #0.448
    if ( Q_BEHAV === 16'bx)
      begin
      $display ("\n@%t            Invalid WE modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid WE not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end
    @(negedge CLK);
    WE = 1'b0;
    @(posedge CLK) begin
    #0.448
    if ( Q_BEHAV === 16'bx)
     begin
      $display ("\n@%t            Invalid WE corrupts the current location", $time); 
      $display ("\n@%t            PASS\n", $time); 
     end 
    else 
     begin 
      test_status = test_status + 1; 
      $display ("\n@%t            ERROR_MODEL: Invalid WE does not corrupt the current location", $time); 
      $display ("\n@%t            FAIL\n", $time);
     end 
    end
  #10;
   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 43;
    $display( "\n\n@%t TEST: %d --- X handling of WE and D --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    WE = 1'b0;
    D   = 16'd1;
    end
    @(posedge CLK)

    @(negedge CLK)
    WE = 1'bx;
    D = 16'bx;
    @(posedge CLK) begin
    #0.448
    if ( Q_BEHAV === 16'bx) 
      begin
      $display ("\n@%t            Invalid WE and D modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid WE and D not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end
    @(negedge CLK);
      WE = 1'b0;
      D   = 16'd0;
    @(posedge CLK) begin
    #0.448
    if ( Q_BEHAV === 16'bx)
     begin
      $display ("\n@%t            Invalid WE and D corrupts the current location", $time); 
      $display ("\n@%t            PASS\n", $time); 
     end 
    else 
     begin 
      test_status = test_status + 1; 
      $display ("\n@%t            ERROR_MODEL: Invalid WE and D does not corrupt the current location", $time); 
      $display ("\n@%t            FAIL\n", $time);
     end 
    end
  #10;
   write_mem_a_loc(6'd1, 16'd1);


    @(negedge CLK) 
    RME = 1'b1;
    $display ("\n#######################################################################");
    test_num = 44;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RM (Write mode) --- \n\n", $time, test_num);
    @(negedge CLK)
    RME = 1'b1;
    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    D = 1;
    ADR = 6'd1;
    RM = 1'b1;
    end
    @(negedge CLK)
    #39.825
    RM = 1'b0;
    @(negedge CLK); 
    WE = 1'b0;
     read_mem_a_loc(6'd1, 16'd1);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Trmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Trmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
    @(negedge CLK) 

    $display ("\n#######################################################################");
    test_num = 45;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RM (Read mode) --- \n\n", $time, test_num);
    @(negedge CLK)
    RME = 1'b1;
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    RM = 1'b1;
    end
    @(negedge CLK)
    #39.825
    RM = 1'b0;
    #5;
     read_mem_a_loc(6'd1, 16'd1);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Trmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Trmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;

    $display ("\n#######################################################################");
    test_num = 46;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on RM (Write mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    ADR = 6'd1;
    RM = 1'b1;
    end
    @(negedge CLK)
    #39.826
    RM = 1'b0;
    @(negedge CLK); 
    WE = 1'b0;
    ADR = ADR;
    read_mem_a_CL(6'd1, 16'dx);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Trmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Trmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    @(negedge CLK) begin
      ME = 1'b0;
      WE = 1'b0;
    end
   write_mem_a_loc(6'd1, 16'd1);

    $display ("\n#######################################################################");
    test_num = 47;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on RM (Read mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    RM = 1'b1;
    end
    @(negedge CLK)
    #39.826
    RM = 1'b0;
    ME = 1'b1;
    ADR = ADR;
    @(posedge CLK) begin
     #0.764;
     if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Trmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Trmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 48;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RM (Write mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    RM = 1'b1;
    RME = 1'b1;
    WE = 1'b1;
    end
    @(posedge CLK)
    #0.570
    RM = 1'b0;
    @(negedge CLK) 
    WE = 1'b0;
     read_mem_a_loc(6'd1, 16'd1);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcrmx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcrmx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    @(negedge CLK) begin
    end

    $display ("\n#######################################################################");
    test_num = 49;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RM (Read mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    RM = 1'b1;
    RME = 1'b1;
    end
    @(posedge CLK)
    #0.570
    RM = 1'b0;
    #5;
     read_mem_a_loc(6'd1, 16'd1);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcrmx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcrmx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
 
    $display ("\n#######################################################################");
    test_num = 50;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on RM (Write mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    WE = 1'b1;
    RM = 1'b1;
    end
    @(posedge CLK)
    #0.569
    RM = 1'b0;
    ME = 1'b1;
    @(negedge CLK);
    WE = 1'b0;
    read_mem_a_CL(6'd1, 16'dx);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcrmx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcrmx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    @(negedge CLK) begin
    WE = 1'b0;
    end
   write_mem_a_loc(6'd1, 16'd1);

    $display ("\n#######################################################################");
    test_num = 51;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on RM (Read mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    WE = 1'b0;
    RM = 1'b1;
    end
    @(posedge CLK)
    #0.569
    RM = 1'b0;
    #0.12499999999999994;
    #0.764;
    if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcrmx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcrmx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
   write_mem_a_loc(6'd1, 16'd1);
 
    $display ("\n#######################################################################");
    test_num = 52;
    $display( "\n\n@%t TEST: %d --- Going to check RM functionality --- \n\n", $time, test_num);
    @(negedge CLK) 
    RME = 1'b1;
    @(negedge CLK) begin
    ME = 1'b1;
    RM = 4'bx ;
    end
    @(posedge CLK) begin
     #0.448;
     if ( Q_BEHAV !== 16'bx)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: RM Operation unsuccessful", $time);
      $display ("\n@%t            FAIL\n", $time);
     end  
    else
     begin
      $display ("\n@%t            RM Operation successful", $time);
      $display ("\n@%t            PASS\n", $time);
     end 

    end
    #10;
     RM = 4'b0010;
   write_mem_a;
    $display ("\n#######################################################################");
    test_num = 53;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RME (Write mode) --- \n\n", $time, test_num);
    @(negedge CLK)
    RME = 1'b0;
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    D = 16'd1;
    WE = 1'b1;
    RME = 1'b1;
    end
    @(negedge CLK)
    #39.825
    RME = 1'b0;
    @(negedge CLK)
    WE = 1'b0;
     read_mem_a_loc(6'd1, 16'd1);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Trmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Trmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
    @(negedge CLK) begin
    end

    $display ("\n#######################################################################");
    test_num = 54;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on RME (Read mode) --- \n\n", $time, test_num);
    @(negedge CLK)
    RME = 1'b0;
    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    WE = 1'b0;
    RME = 1'b1;
    end
    @(negedge CLK)
    #39.825
    RME = 1'b0;
    #5;
     read_mem_a_loc(6'd1, 16'd1);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Trmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Trmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;

    $display ("\n#######################################################################");
    test_num = 55;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on RME (Write mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    ADR = 6'd1;
    RME = 1'b1;
    end
    @(negedge CLK)
    #39.826
    RME = 1'b0;
    @(negedge CLK);
    WE = 1'b0;
    read_mem_a_CL(6'd1, 16'dx);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Trmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Trmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    @(negedge CLK) begin
    end
   write_mem_a_loc(6'd1, 16'd1);

    $display ("\n#######################################################################");
    test_num = 56;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on RME (Read mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 6'd1;
    RME = 1'b1;
    end
    @(negedge CLK)
    #39.826
    RME = 1'b0;
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Trmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Trmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
   write_mem_a_loc(6'd1, 16'd1);
    $display ("\n#######################################################################");
    test_num = 57;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RME (Write mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    D = 1;
    ADR = 6'd1;
    RME = 1'b1;
    end
    @(posedge CLK)
    #0.570
    RME = 1'b0;
    @(negedge CLK)
    WE = 1'b0;
     read_mem_a_loc(6'd1, 16'd1);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcrmx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcrmx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
    @(negedge CLK) begin
      WE = 1'b0;
    end

    $display ("\n#######################################################################");
    test_num = 58;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on RME (Read mode) --- \n\n", $time, test_num);
    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b0;
    ADR = 6'd1;
    RME = 1'b1;
    end
    @(posedge CLK)
    #0.570
    RME = 1'b0;
    #5;
     read_mem_a_loc(6'd1, 16'd1);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcrmx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcrmx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;
 
    $display ("\n#######################################################################");
    test_num = 59;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on RME (Write mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    ADR = 6'd1;
    RME = 1'b1;
    end
    @(posedge CLK)
    #0.569
    RME = 1'b0;
    @(negedge CLK)
    WE = 1'b0;
    read_mem_a_CL(6'd1, 16'dx);
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcrmx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcrmx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    @(negedge CLK) begin
    end

    $display ("\n#######################################################################");
    test_num = 60;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on RME (Read mode)--- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    WE = 1'b1;
    ADR = 6'd1;
    RME = 1'b1;
    end
    @(posedge CLK)
    #0.569
    RME = 1'b0;
    #0.12499999999999994;
    if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcrmx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcrmx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    @(negedge CLK) begin
      WE = 1'b0;
    end
    #10;
   write_mem_a_loc(6'd1, 16'd1);
    @(negedge CLK)
     RM = 4'b0010;
    $display ("\n#######################################################################");
    test_num = 61;
    $display( "\n\n@%t TEST: %d --- Going to check Setup constraint on TEST1 --- \n\n", $time, test_num);

    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = 6'd1;
      #0.571;
      TEST1 = 1'b1;
    end
    @(negedge CLK)
      #39.692
      TEST1 = 1'b0;
      #5;
      read_mem_a_loc(6'd1, 16'd1);
      if (err_cnt == 0)
        begin
        $display ("\n@%t            The Model incorporates Parameters Tt1c modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tt1c is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end


      #10;
    $display ("\n#######################################################################");
    test_num = 62;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on TEST1 --- \n\n", $time, test_num);

    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = 6'd1;
      #0.571;
      TEST1 = 1'b1;
    end
    @(negedge CLK)
    #39.693
    TEST1 = 1'b0;
    @(posedge CLK)
    begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tt1c modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tt1c is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    @(negedge CLK)
    write_mem_a_loc(6'd1, 16'd1);
    read_mem_a_loc(6'd1, 16'd1);

    $display ("\n#######################################################################");
    test_num = 63;
    $display( "\n\n@%t TEST: %d --- Going to check Hold constraint on TEST1 --- \n\n", $time, test_num);

    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = 6'd1;
      #0.571;
      TEST1 = 1'b1;
    end
    @(negedge CLK)
      #0.570
      TEST1 = 1'b0;
      #5;
        read_mem_a_loc(6'd1, 16'd1);

        if (err_cnt == 0)
          begin
        $display ("\n@%t            The Model incorporates Parameters Tct1x modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tct1x is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

        #10;
 
    $display ("\n#######################################################################");
    test_num = 64;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on TEST1 --- \n\n", $time, test_num);

    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = 6'd1;
      #0.571;
      TEST1 = 1'b1;
    end
    @(negedge CLK)
      #0.569
      TEST1 = 1'b0;
      #0.12299999999999994; 
      if (Q_BEHAV === 16'bx)
        begin
        $display ("\n@%t            The Model incorporates Parameters Tct1x modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tct1x is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

      #10;
      write_mem_a_loc(6'd1, 16'd1);
      read_mem_a_loc(6'd1, 16'd1);



    $display ("\n#######################################################################");
    test_num = 65;

    $display( "\n\n@%t TEST: %d --- Going to check CLK violation --- \n\n", $time, test_num);
    @(negedge CLK)
    @(negedge CLK)
    @(negedge CLK) 
     ADR = 1;
    @(negedge CLK); 
    @(posedge CLK) begin
     #0.115
     CLK = ~CLK;
     #0.448;
    if ( Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tch modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tch is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end 
    #10;
     CLK = ~CLK;

    read_mem_compare_a_X;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tch modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tch is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

   write_mem_a;
      @(negedge CLK);

    #10;
    @(negedge CLK)
    ADR = 1;
    @(negedge CLK) begin
     #0.307
     CLK = ~CLK;
     #0.448;
    if ( Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcl modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcl is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end 
    #10; 
     CLK = ~CLK;

    read_mem_compare_a_X;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcl modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcl is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end


   write_mem_a; 
      @(negedge CLK);

    #10;
    @(negedge CLK) 
    ADR = 1;
    @(negedge CLK) begin
     #0.308
     CLK = ~CLK; 
     #0.26099999999999995
     CLK = ~CLK; 
    @(posedge CLK)
     #0.448; 
    if ( Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end 
    #10;  
 
    read_mem_compare_a_X;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end


   write_mem_a;  
      @(negedge CLK);
   write_mem_a;
    $display( "\n\n@%t TEST: %d --- Going to check CLK Tccvddmin violation --- \n\n", $time, test_num);
      @(negedge CLK);
    #10;
    @(negedge CLK)
    ADR = 1;
    RME = 1'b1;
    RM = 4'd0;
    @(negedge CLK) begin
     #0.001;
     CLK = ~CLK;
     #0.884
     CLK = ~CLK;
    @(posedge CLK)
     #0.764;
    if ( Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tccvddmin modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tccvddmin is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
        RME = 1'b0;
    read_mem_compare_a_X;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tccvddmin modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tccvddmin is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

   write_mem_a;
      @(negedge CLK);
   write_mem_a;
    $display( "\n\n@%t TEST: %d --- Going to check CLK Tccslow violation --- \n\n", $time, test_num);
      @(negedge CLK);
    #10;
    @(negedge CLK)
    ADR = 1;
        RME = 1'b1;
      RM = 4'd1;
    @(negedge CLK) begin
     #0.001;
     CLK = ~CLK;
     #0.625
     CLK = ~CLK;
    @(posedge CLK)
     #0.505;
    if ( Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tccslow modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tccslow is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
        RME = 1'b0;
    RM = 4'd0;
    read_mem_compare_a_X;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tccslow modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tccslow is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

   write_mem_a;
      @(negedge CLK);
   write_mem_a;
    $display( "\n\n@%t TEST: %d --- Going to check CLK Tccdef violation --- \n\n", $time, test_num);
      @(negedge CLK);
    #10;
    @(negedge CLK)
    ADR = 1;
        RME = 1'b1;
      RM = 4'd2;
    @(negedge CLK) begin
     #0.001;
     CLK = ~CLK;
     #0.568
     CLK = ~CLK;
    @(posedge CLK)
     #0.448;
    if ( Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tccdef modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tccdef is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
        RME = 1'b0;
      RM = 4'd0;
    read_mem_compare_a_X;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tccdef modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tccdef is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

   write_mem_a;
      @(negedge CLK);
   write_mem_a;
    $display( "\n\n@%t TEST: %d --- Going to check CLK Tccfast violation --- \n\n", $time, test_num);
      @(negedge CLK);
    #10;
    @(negedge CLK)
    ADR = 1;
        RME = 1'b1;
      RM = 4'd3;
    @(negedge CLK) begin
     #0.001;
     CLK = ~CLK;
     #0.5619999999999999
     CLK = ~CLK;
    @(posedge CLK)
     #0.444;
    if ( Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tccfast modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tccfast is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
        RME = 1'b0;
      RM = 4'd0;
    read_mem_compare_a_X;
    if (err_cnt == 0)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tccfast modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tccfast is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

   write_mem_a;
      @(negedge CLK);
    $display ("\n#######################################################################");
    test_num = 66;

    $display( "\n\n@%t TEST: %d - X handling of CLK (0->X->0) during Read mode - \n\n", $time, test_num);
    @(negedge CLK) begin
    #10
    CLK = 1'bx;
     #0.448;
    if ( Q_BEHAV === 16'bx)
      begin
      $display ("\n@%t            Invalid CLK modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid CLK not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end 
    #10;
    CLK = 0;
    #0.448;
    if ( Q_BEHAV !== 16'bx)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: CLK (X->0) during Read not handled properly", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 
    else
     begin
      $display ("\n@%t            CLK (X->0) during Read handled properly", $time);
      $display ("\n@%t            PASS\n", $time);
     end
    read_mem_compare_a_X;
    if (err_cnt != 0)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid CLK during Read does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 
    else
     begin
      $display ("\n@%t            Invalid CLK during Read corrupts entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end 

   write_mem_a;
    $display ("\n#######################################################################");
    test_num = 67;

    $display( "\n\n@%t TEST: %d - X handling of CLK (1->X->1) during Read mode - \n\n", $time, test_num);
    @(posedge CLK) begin
    #10
    CLK = 1'bx;
     #0.448;
    if ( Q_BEHAV === 16'bx)
      begin
      $display ("\n@%t            Invalid CLK modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid CLK not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end 
    #10; 
    CLK = 1;
    #0.448;
    if ( Q_BEHAV !== 16'bx)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: CLK (X->1) during Read not handled properly", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 
    else
     begin
      $display ("\n@%t            CLK (X->1) during Read handled properly", $time);
      $display ("\n@%t            PASS\n", $time);
     end 
    read_mem_compare_a_X;
    if (err_cnt != 0)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid CLK during Read does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 
    else 
     begin
      $display ("\n@%t            Invalid CLK during Read corrupts entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end 
 
   write_mem_a;
    $display ("\n#######################################################################");
    test_num = 68;

    $display( "\n\n@%t TEST: %d - X handling of CLK (0->X->0) during Write mode - \n\n", $time, test_num);
    @(negedge CLK) begin
    WE = 1'b1;
    #10
    CLK = 1'bx;
     #0.448;
    if ( Q_BEHAV === 16'bx)
      begin
      $display ("\n@%t            Invalid CLK modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid CLK not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end 
    #10;
    CLK = 0;
    WE = 1'b0;
    #0.448;
    if ( Q_BEHAV !== 16'bx)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: CLK (X->0) during Write not handled properly", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 
    else
     begin
      $display ("\n@%t            CLK (X->0) during Write handled properly", $time);
      $display ("\n@%t            PASS\n", $time);
     end
    read_mem_compare_a_X;
    if (err_cnt != 0)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid CLK during Write does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 
    else
     begin
      $display ("\n@%t            Invalid CLK during Write corrupts entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end 

   write_mem_a;
    $display ("\n#######################################################################");
    test_num = 69;

    $display( "\n\n@%t TEST: %d - X handling of CLK (1->X->1) during Write mode - \n\n", $time, test_num);
    @(negedge CLK) begin
    WE = 1'b1;
    end
    @(posedge CLK) begin
    #10
    CLK = 1'bx;
     #0.448;
    if ( Q_BEHAV === 16'bx)
      begin
      $display ("\n@%t            Invalid CLK modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid CLK not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end 
    #10; 
    CLK = 1;
    WE = 1'b0;
    #0.448;
    if ( Q_BEHAV !== 16'bx)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: CLK (X->1) during Write not handled properly", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 
    else
     begin
      $display ("\n@%t            CLK (X->1) during Write handled properly", $time);
      $display ("\n@%t            PASS\n", $time);
     end 
    read_mem_compare_a_X;
    if (err_cnt != 0)
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid CLK during Write does not corrupt entire memory", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 
    else 
     begin
      $display ("\n@%t            Invalid CLK during Write corrupts entire memory", $time);
      $display ("\n@%t            PASS\n", $time);
     end 
 
   write_mem_a;



    @(negedge CLK);
    $display ("\n#######################################################################");
    test_num = 70;
    $display( "\n\n@%t TEST: %d --- X handling of RM --- \n\n", $time, test_num);

    @(negedge CLK) begin
     RM = 4'bx;
     ME = 1'b1;
     WE = 1'b0;
     RME = 1'b1;
    end
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
      $display ("\n@%t            Invalid RM modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid RM not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end 
    @(negedge CLK)
     RM = 4'b0;
     RME = 1'b0;
     ME = 1'b1;
    @(negedge CLK)
    @(negedge CLK);
    $display ("\n#######################################################################");
    test_num = 71;
    $display( "\n\n@%t TEST: %d --- X handling of RME --- \n\n", $time, test_num);

    @(negedge CLK) begin
     RM = 4'b0;
     ME = 1'b1;
     WE = 1'b0;
     RME = 1'bx;
    end
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
      $display ("\n@%t            Invalid RME modelled effectively", $time);
      $display ("\n@%t            PASS\n", $time);
     end  
    else
     begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid RME not modelled effectively", $time);
      $display ("\n@%t            FAIL\n", $time);
     end 

    end 
    @(negedge CLK)
     RM = 4'b0;
     RME = 1'b0;
     ME = 1'b1;
    @(negedge CLK)

   `ifdef code_coverage
    @(negedge CLK);
       top_behav.uut.mem_fault_array_XOR[1] = 16'b1;
       write_mem_a_loc(6'd1, 16'd0);
    @(negedge CLK);
       read_mem_a_loc(6'd1, 16'd1);
    @(negedge CLK);
       write_mem_a_loc(6'd1, 16'd1);
    @(negedge CLK);
       read_mem_a_loc(6'd1, 16'd0);
   `endif

    $display ("\n#######################################################################");
    test_num = 72;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on RM --- \n\n", $time, test_num);

    @(negedge CLK) begin
    RME = 1'b1;
    ME = 1'b1;
    ADR = 6'd1;
    RM = 1'b1;
    end
    @(posedge CLK)
    #0.569
    RM = 1'b0;
    #0.764;
    #0.12499999999999994;
    if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Tcrmx modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tcrmx is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    #10;

   write_mem_a_loc(6'd1, 16'd1);
   @(negedge CLK);
    RME = 1'b0;
    $display ("\n#######################################################################");
    test_num = 73;
    $display( "\n\n@%t TEST: %d --- Going to perform Setup violation on RME --- \n\n", $time, test_num);

    @(negedge CLK) begin
    ME = 1'b1;
    ADR = 6'd1;
    RME = 1'b1;
    end
    @(negedge CLK)
    #39.826
    RME = 1'b0;
    @(posedge CLK) begin
     #0.448;
     if (Q_BEHAV === 16'bx)
      begin
        $display ("\n@%t            The Model incorporates Parameters Trmc modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Trmc is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

    end
    #10;
   write_mem_a_loc(6'd1, 16'd1);

    $display ("\n#######################################################################");
    test_num = 74;
    $display( "\n\n@%t TEST: %d --- Going to perform Hold violation on TEST1 --- \n\n", $time, test_num);

    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = 6'd1;
      #0.571;
      TEST1 = 1'b1;
    end
    @(negedge CLK)
      #0.569
      TEST1 = 1'b0;
      #0.12299999999999994;
      if (Q_BEHAV === 16'bx)
        begin
        $display ("\n@%t            The Model incorporates Parameters Tct1x modelled effectively", $time);
        $display ("\n@%t            PASS\n", $time);
      end
      else
      begin
        test_status = test_status + 1 ;
        $display ("\n@%t               ERROR_MODEL: The parameter Tct1x is not modelled effectively ", $time);
        $display ("\n@%t            FAIL\n", $time);
      end

      #10;
      write_mem_a_loc(6'd1, 16'd1);
      read_mem_a_loc(6'd1, 16'd1);

    $display ("\n#######################################################################");
    test_num = 75;

    $display( "\n\n@%t TEST: %d --------- Test Vectors For Code Coverage ------- \n\n", $time, test_num);
    @(negedge CLK);
      force top_behav.uut.mes_all_valid = 0;
    @(negedge CLK);
    @(negedge CLK);
     ADR = 63;
     D = ~ 16'b0101010101010101;

    @(negedge CLK);
     ADR = 6'd0;
     D = ~ D;

    @(negedge CLK);
     D = 16'b1010101010101010;
     for ( ri = 0; ri < 3; ri = ri + 1 ) begin
      for ( j = 0; j < 3; j = j + 1 ) begin
       @(negedge CLK);
        {WE,ME} = {sdata[ri],sdata[j]};
        D = ~ D;
      end // end of for inner loop      
     end // end of for loop      
     @(negedge CLK);
      {WE,ME} = {sdata[0],sdata[0]};

     @(negedge CLK);
     ADR = 6'bx;
     for ( ri = 0; ri < 3; ri = ri + 1 ) begin
      for ( j = 0; j < 3; j = j + 1 ) begin
       @(negedge CLK);
        {WE,ME} = {sdata[ri],sdata[j]};
        for ( ld = 0; ld < 3; ld = ld + 1 ) begin
         @(negedge CLK);
           D = {16{sdata[ld]}};
        end // end of for inner loop
      end // end of for inner loop
     end // end of for loop
     @(negedge CLK);
      {WE,ME} = {sdata[0],sdata[0]};


       @(negedge CLK);
        D = 16'b0;
        ADR = 6'b0;
        TEST1 = 1'b0;
    `ifdef code_coverage
     for ( ri = 0; ri < 3; ri = ri + 1 ) begin
      for ( j = 0; j < 3; j = j + 1 ) begin
       @(negedge CLK);
        {WE,ME} = {sdata[ri],sdata[j]};
       @(negedge CLK);
        #5;
        ME = ~ ME;
        #0.001;
        CLK = ~ CLK;
        #0.117
        CLK = ~ CLK;
       @(posedge CLK);
       @(negedge CLK);
        #2;
        ME = ~ ME;
        #0.324;
        CLK = ~ CLK;
       @(negedge CLK);
       @(negedge CLK);
        #5
        D = ~ D;
        #0.001;
        CLK = ~ CLK;
        #0.117
        CLK = ~ CLK;
       @(posedge CLK);
       @(negedge CLK);
        #5
        ADR = ~ ADR;
        #0.001
        CLK = ~ CLK;
        #0.117
        CLK = ~ CLK;
       @(posedge CLK);
       @(negedge CLK);
        #5
        TEST1 = ~ TEST1;
        #0.001
        CLK = ~ CLK;
        #0.117
        CLK = ~ CLK;
       @(negedge CLK);
        #5;
        #5;
        CLK = 1'b1;
        #0.115
        CLK = ~ CLK;
        #1.308
        CLK = ~ CLK;
       @(negedge CLK);
      end // end of for inner loop
     end // end of for loop
     @(negedge CLK);
      {WE,ME} = {sdata[0],sdata[0]};

       @(negedge CLK);
        D = 16'b0;
        ADR = 6'b0;
        TEST1 = 1'b0;
       @(negedge CLK);
       write_mem_a;
       @(negedge CLK);
       @(negedge CLK);

     @(negedge CLK);
     ADR = 63;
     D = 16'b0;
     @(negedge CLK);
     ADR = 6'b0;
   `endif
      release top_behav.uut.mes_all_valid;

    $display( "\n\n@%t TEST: ALL --------- Memory test over ---------- \n\n", $time);


    $display("\n####################################################################################");
    $display("\n                    ********** TEST SUMMARY **********\n");
    $display("\n1.  No. of test_status Errors is  %d", test_status);
    $display("\n2.  Please check ERROR_MODEL messages in the verilog.log file");
    $display("    for the cause of test_status Errors");
    $display("\n3.  Please check OP in the verilog.log file for any mismatch");
    $display("    between  verilog and vhdl memory model!\n");
    $display("\n####################################################################################");

#1000 $finish;
end//initial



endmodule
