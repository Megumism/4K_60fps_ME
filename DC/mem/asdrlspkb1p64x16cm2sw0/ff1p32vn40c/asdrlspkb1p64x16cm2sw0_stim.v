//---------------------------------------------------------------------
//               Copyright(c) Synopsys, Inc.                           
//     All Rights reserved - Unpublished -rights reserved under        
//     the Copyright laws of the United States of America.             
//                                                                     
//  U.S. Patents: 7,093,156 B1 and 7,406,620 B2 (and more pending).    
//                                                                     
//  This file includes the Confidential information of Synopsys, Inc.  
//  and Huali.                                                         
//  The receiver of this Confidential Information shall not disclose   
//  it to any third party and shall protect its confidentiality by     
//  using the same degree of care, but not less than a reasonable      
//  degree of care, as the receiver uses to protect receiver's own     
//  Confidential Information.                                          
//  Licensee acknowledges and agrees that all output generated for     
//  Licensee by Synopsys, Inc. as described in the pertinent Program   
//  Schedule(s), or generated by Licensee through use of any Compiler  
//  licensed hereunder contains information that complies with the     
//  Virtual Component Identification Physical Tagging Standard (VCID)  
//  as maintained by the Virtual Socket Interface Alliance (VSIA).     
//  Such information may be expressed in GDSII Layer 63 or other such  
//  layer designated by the VSIA, hardware definition languages, or    
//  other formats.  Licensee is not authorized to alter or change any  
//  such information.                                                  
//---------------------------------------------------------------------
//                                                                     
//  Built for linux64 and running on linux64.                          
//                                                                     
//  Software           : Rev: S-2021.12                                
//  Library Format     : Rev: 1.05.00                                  
//  Compiler Name      : hu55npkb1p11asdrl32ksa03p1                    
//  Platform           : Linux3.10.0-1160.49.1.el7.x86_64              
//                     : #1 SMP Tue Nov 30 15:51:32 UTC 2021x86_64     
//  Date of Generation : Fri Feb 18 10:17:52 CST 2022                  
//                                                                     
//---------------------------------------------------------------------
//   --------------------------------------------------------------     
//                       Template Revision : 3.7.8                      
//   --------------------------------------------------------------     
//                      * Synchronous, 1-Port SRAM *                  
//                  * Verilog Testbench ( Functional ) *              
// * Verilog Testbench for comparison of Behavioral verilog & Structural verilog models * 
//                THIS IS A SYNCHRONOUS 1-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:asdrlspkb1p64x16cm2sw0                               
//   Memory Size:64 words x 16 bits                                   
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   Q[15:0]                          
//               Input Ports:                                         
//                                   ADR[5:0]                         
//                                   D[15:0]                          
//                                   WE                               
//                                   ME                               
//                                   CLK                              
//                                   TEST1                            
//                                   RM[3:0]                          
//                                   RME                              

`timescale 1 ns / 1 ps 
module test;

wire [15:0] Q;
wire [15:0] Q_BEHAV;
reg [5:0] ADR;
reg [15:0] D;
reg WE;
reg ME;
reg CLK;
reg TEST1;
reg [3:0] RM;
reg RME;
integer test_status;
reg [15:0]  mem_1_content ;
reg [15:0]  mem_0_content ;
integer wem_cnt ;
integer i,ri,rj,j,lc,ld;
integer loop_num;
integer test_num;
integer err_cnt_test;
integer err_cnt;
integer simul_clk;
reg Q_tmp ;
reg flagrtl;
reg synthflagrtl;
reg flaghold;
reg flagepic;
integer file_vec;
integer file_chk_vec;
 
integer temp_addr;
reg flag_ignore_read_addx;
asdrlspkb1p64x16cm2sw0_behav top_behav (  .Q( Q_BEHAV), .ADR( ADR), .D( D), .WE( WE), .ME( ME), .CLK( CLK), .TEST1( TEST1), .RM( RM), .RME( RME) );
asdrlspkb1p64x16cm2sw0 top_struct (  .Q( Q), .ADR( ADR), .D( D), .WE( WE), .ME( ME), .CLK( CLK), .TEST1( TEST1), .RM( RM), .RME( RME) );
`define True    1'b1
`define False   1'b0
`define Mid     1'bx
`define Highz   1'bz

initial begin
    //$vcdplusfile("waves.vpd");
    //$vcdpluson;
    //$shm_open("waves.shm");
    //$shm_probe("AC");
    //$sdf_annotate( "asdrlspkb1p64x16cm2sw0.sdf");
end


//////////////////////////////////////////////////////////////////////
////This section is inserted to collect test vector for epic      ////
//////////////////////////////////////////////////////////////////////
initial begin
   `ifdef epicsim
      flagepic = 1;
   `else
      flagepic = 0;
   `endif  
   if ( flagepic ) begin
    file_vec = $fopen("asdrlspkb1p64x16cm2sw0.vec");
    file_chk_vec = $fopen("asdrlspkb1p64x16cm2sw0.chk_vec");
    if (file_vec == 0) $finish;
        $fwrite(file_vec, ";\n");
        $fwrite(file_vec, "; (ot=top_behav.ADR,top_behav.D,top_behav.WE,top_behav.ME,top_behav.CLK,top_behav.TEST1,top_behav.RM,top_behav.RME);\n");
    if (file_chk_vec == 0) $finish;
        $fwrite(file_chk_vec, ";\n");
        $fwrite(file_chk_vec, "; Q\n");
   end
end
initial begin
   if ( flagepic ) begin
       $fmonitor(file_vec,"%t %b %b %b %b %b %b %b %b ",$realtime,top_behav.ADR,top_behav.D,top_behav.WE,top_behav.ME,top_behav.CLK,top_behav.TEST1,top_behav.RM,top_behav.RME);
       $fmonitor(file_chk_vec,"%t %b ",$realtime,Q);
   end
end
///////////////////////////////////////////////////////////////////////
////              This ends vector collection                      ////
///////////////////////////////////////////////////////////////////////

reg [15:0] OP_Q;

task compare_Q;
  output [15:0] OP_Q;
  input [15:0] Q;
  input [15:0] Q_BEHAV;

    if ( Q === 16'bz && Q_BEHAV === 16'bz )
      OP_Q = 16'b0;
    else if ( Q_BEHAV === 16'bx )
      OP_Q = 16'b0;
    else begin
      for ( i = 0; i <= 15; i = i + 1 ) begin
         OP_Q[i] = (((Q_BEHAV[i] === 1'bx) || ( Q_BEHAV[i] === 1'bz && Q[i] === 1'bz))?0:(Q_BEHAV[i] ^ Q[i]));
      end
    end
endtask

always @( Q or Q_BEHAV )
begin
#0;
    if ( (|( Q ^ Q )) == 0 && (|( Q_BEHAV ^ Q_BEHAV )) == 0 )
    begin
       #2.001 compare_Q ( OP_Q, Q, Q_BEHAV );
    end
    else if ( Q === 16'bz && Q_BEHAV === 16'bz )
      OP_Q = 16'b0;
    else if ( Q_BEHAV === 16'bx  )
      OP_Q = 16'b0;
    else 
    begin
      OP_Q = 16'b0;
      #2.001 compare_Q ( OP_Q, Q, Q_BEHAV );
    end
end

always @(OP_Q)
begin
  if ( OP_Q !== 16'b0 )
   begin
     test_status = test_status + 1;
     $display( $realtime, , "ERROR_MODEL: Q = %h, Q_BEHAV = %h", Q, Q_BEHAV );
   end
   else
   begin
     $display( $realtime, , "OP_Q = %h", OP_Q );
   end
end

initial
   begin
    `ifdef VIRAGE_FAST_VERILOG
      flagrtl = 1;
    `else
      `ifdef rtlmodel
          flagrtl = 1;
      `else
          flagrtl = 0;
      `endif  
    `endif
      `ifdef  virage_ignore_read_addx
         flag_ignore_read_addx = 0;
      `else
         flag_ignore_read_addx = 1;
      `endif
      `ifdef zerohold
          flaghold = 1;
      `else
          flaghold = 0;
      `endif  
      `ifdef synthrtlmodel
          synthflagrtl = 0;
      `else
          synthflagrtl = 1;
      `endif  
       simul_clk = 0 ;
       test_num = 0;
       test_status = 0;
       OP_Q = 0;
       ADR = {6{1'b0}};
       D = {16{1'b0}};
       WE = 1'b0;
       ME = 1'b0;
       CLK = 1'b0;
       TEST1 = 1'b0;
       RM = {4{1'b0}};
       RME = 1'b0;
     RM = 4'b0010;
   end


task write_read;
begin
    $display( "\n\n@%t TEST: --------- Memory test begin ---------- \n\n", $time);

    $display ("\n#######################################################################");
  test_num = 0;
    operationAB( "w", 0, 1, 16'b1010101010101010, "w", 63, 1, 16'b0101010101010101);    //op, start, inc, data
    operationAB( "r", 0, 1, 16'b1010101010101010, "r", 63, 1, 16'b0101010101010101);    //op, start, inc, data
    $display( "\n\n@%t TEST: %d --------- Memory test done ---------- \n\n", $time, test_num);

    $display ("\n#######################################################################");
  test_num = 1;
    operationAB( "w", 0, 1, 16'b0101010101010101, "r", 63, 1, 16'b0101010101010101);    //op, start, inc, data
    operationAB( "r", 0, 1, 16'b0101010101010101, "r", 63, 1, 16'b0101010101010101);    //op, start, inc, data
    $display( "\n\n@%t TEST: %d --------- Memory test done ---------- \n\n", $time, test_num);

    $display ("\n#######################################################################");
  test_num = 2;
    operationAB( "r", 0, 1, 16'b0101010101010101, "w", 63, 1, 16'b1010101010101010);    //op, start, inc, data
    operationAB( "r", 0, 1, 16'b0101010101010101, "r", 63, 1, 16'b1010101010101010);    //op, start, inc, data
    $display( "\n\n@%t TEST: %d --------- Memory test done ---------- \n\n", $time, test_num);

  end
endtask




 task write_mem_a_zero_hold_1; 
   input [ 5:0] addr_incr; //increments address by this value
   integer j,inc;
   integer i;
   begin
     @(negedge CLK)
     begin
       ME = 1'b1;
     end
     inc = addr_incr;
     if (!synthflagrtl)
       i = 1;
     else
       i = 0;
     for ( j=i; j<= 63; j= j+inc)
     begin
       @(negedge CLK)
       begin
         WE = 1'b1;
       end
       @(posedge CLK)
       begin
         ADR = j;
         D = j;
       end
       @(negedge CLK)
       begin
         #0.053;
         WE = 1'b0;
       end
     end
   end
 endtask

 task write_mem_a_zero_hold_2; 
   input [ 5:0] addr_incr; //increments address by this value
   integer j,inc;
   integer i;
   begin
     @(negedge CLK)
     begin
       ME = 1'b1;
     end
     inc = addr_incr;
     if (!synthflagrtl)
       i = 1;
     else
       i = 0;
     for ( j=i; j<= 63; j= j+inc)
     begin
       @(posedge CLK)
       begin
         WE = 1'b1;
         ADR = j;
         D = j;
       end
       @(negedge CLK)
       begin
         #0.053;
         WE = 1'b0;
       end
     end
   end
 endtask

//stim-func

task write_mem_a;
  input [ 5:0] addr_incr; //increments address by this value
  integer j,inc;
  integer i;
  begin
    @(negedge CLK) 
    begin
      ME = 1'b1;
    end
    inc = addr_incr;
    if (!synthflagrtl)
      i = 1;
    else
      i = 0;
    for ( j=i; j<= 63; j= j+inc)
    begin
      @(negedge CLK) 
      begin
        WE = 1'b1;
        ADR = j;
        D = j;
      end
      @(posedge CLK)
      begin
        #0.053;
        WE = 1'b0;
      end
    end
  end
endtask


task write_mem_a_1;
integer j;
  begin
   @(negedge CLK)
   begin
     ME = 1'b1;
     D = 16'b1111111111111111;
  end
  for ( j=0; j<= 63; j= j+1) 
  begin
    @(negedge CLK) 
    begin
      WE = 1'b1;
      ADR = j;
    end 
    @(posedge CLK) 
    begin
      #0.053;
      WE = 1'b0;
    end 
  end
  end
endtask

task write_mem_a_loc;
  input [5:0] loc_adr;
  input [15:0] loc_data;
  begin   
  @(negedge CLK) 
  begin
    ME = 1'b1;
  end
  @(negedge CLK) 
  begin
    WE = 1'b1;
    ADR = loc_adr;
    D = loc_data;
  end
  @(negedge CLK) 
  begin
    WE = 1'b0;
  end
  end
endtask

task read_mem_a_loc;
  input [5:0] loc_adr;
  input [15:0] loc_data;
  begin   
    err_cnt = 0;   
    @(negedge CLK)
    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = loc_adr;
    end
    @(posedge CLK)
    begin
    if (RME === 1'b1)
    begin
      if(RM === 4'd0)
        #0.67;
      else if(RM === 4'd1)
        #0.439;
      else if(RM === 4'd2)
        #0.39;
      else if(RM === 4'd3)
        #0.386;
    end
      else
      #0.39
      if (Q_BEHAV === 16'bx) 
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV, loc_data, $time);
        $display ("\n@%t            FAIL\n", $time);
      end
      else if (Q_BEHAV != loc_data) 
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV, loc_data, $time);
        $display ("\n@%t            FAIL\n", $time);
      end   
      else
        $display ("\n@%t    Test passing the above RM setting  \n", $time);
  end
  end
endtask


task read_mem_a_CL;
  input [5:0] loc_adr;
  input [15:0] loc_data;
  begin 
    err_cnt = 0;
    @(negedge CLK)
    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = loc_adr;
    end
    @(posedge CLK)
    begin
      #0.39
      if (Q_BEHAV !== 16'bx)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h attime %t ",ADR, Q_BEHAV, loc_data, $time);
        $display ("\n@%t            FAIL\n", $time);
      end
      else if (Q_BEHAV == loc_data)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h attime %t ",ADR, Q_BEHAV, loc_data, $time);
        $display ("\n@%t            FAIL\n", $time);
      end 
  end
  end
endtask

task read_mem_compare_a;
   input [ 5:0] addr_incr; //increments address by this value
   integer j,inc;
   integer data;
   integer i;
   begin

   if (!synthflagrtl)
     begin
       data = 1;
       i = 1;
     end
   else
     begin
       data = 0;
       i = 0;
     end
     err_cnt = 0;
     @(negedge CLK)
     ME = 1'b1;
     inc = addr_incr;
     for ( j=i; j<= 63; j= j+inc)
     begin
       @(negedge CLK)
       ADR = j;
       @(posedge CLK)
       begin
         #0.39
         if (Q_BEHAV === 16'bx)
         begin
           err_cnt = err_cnt + 1;
           test_status = test_status + 1;
           $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV, data, $time);
           $display ("\n@%t            FAIL\n", $time);
         end
         else if (Q_BEHAV != data)
         begin
           err_cnt = err_cnt + 1;
           test_status = test_status + 1;
           $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV, data, $time);
           $display ("\n@%t            FAIL\n", $time);
         end
         data = data + inc;
         if (data > 16'b1111111111111111) data = 0;
      end
    end
  end
endtask

task read_mem_compare_a_X;
  integer j;
  begin
    err_cnt = 0;
    @(negedge CLK) 
    begin
      ME = 1'b1;
    end
    for ( j=0; j<= 63; j= j+1) 
    begin
      @(negedge CLK)
      ADR = j;
      @(posedge CLK) 
      begin
        #0.39
        if (Q_BEHAV !== 16'bx) 
        begin
          err_cnt = err_cnt + 1;
          test_status = test_status + 1;
          $display ("ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = 16'bx at time %t  ",ADR, Q_BEHAV, $time);
          $display ("\n@%t            FAIL\n", $time);
        end
      end
    end
  end
endtask



reg [2 : 0] sdata;
reg temp_clk;

initial
begin
 temp_clk = 0;
 sdata[0] = 1'b0;
 sdata[1] = 1'b1;
 sdata[2] = 1'bX;
end

always #35 temp_clk = ~temp_clk;

// stim-always

always
begin
   #40
   CLK = ~CLK;

end

//flow
//initialize all variables to 0
//then call write and read task.

initial
begin
    ME   = 1'b0;
    WE   = 1'b0;
    D   = 16'b1111111111111111;
    TEST1   = 1'b0; 
     RM = 4'b0010;
    ADR = 63;
    @(negedge CLK)
    WE   = 1'b1;
    @(negedge CLK)
    ME = 1'b1;
    @(negedge CLK)
    ME = 1'b0;
    #0.001;
    WE = 1'b0;
    @(negedge CLK)
    ME = 1'b1;
    WE = 1'b1;
    @(negedge CLK)
    ME = 1'b0;
    WE = 1'b0;
    #20;
    @(negedge CLK)
    ME = 1'b1;
    @(negedge CLK)
    ME = 1'b0;
    #40;
    @(negedge CLK)
    ME = 1'b1;
    write_read;
    @(negedge CLK)
    ME   = 1'b1;
    #10;
 // Asymetric data pattern
  if (flaghold)
  begin
     @(negedge CLK)
     begin
     WE = 1'b1;
     end
     @(posedge CLK)
     begin
      ADR = 63;
      D = 63;
     end
     @(negedge CLK)
     begin
       #0.053;
       WE = 1'b0;
     end

  test_num = 3 ;
    $display("\n\n@%t TEST: %d ---- Additional Test for Zero Hold time start here -----\n\n", $time , test_num );
    @(negedge CLK)
    $display( "\n\n@%t TEST: %d --------- Memory writing through port A ------- \n\n", $time, test_num);
    write_mem_a_zero_hold_1(1);
    $display( "\n\n@%t TEST: %d --------- Memory read through port A ------- \n\n", $time, test_num);
    read_mem_compare_a(1);
    if ( err_cnt != 0 )
    begin
      test_status = test_status + 1;
      $display( "\n\n@%t          --------- Memory read through port A unsuccessful------- \n\n", $time); 
    end
    else
    $display( "\n\n@%t          --------- Memory read through port A successful------- \n\n", $time); 
    #100;
  test_num = 4 ;
    $display( "\n\n@%t TEST: %d --------- Memory writing through port A ------- \n\n", $time, test_num);
    write_mem_a_zero_hold_2(1);
    $display( "\n\n@%t TEST: %d --------- Memory read through port A ------- \n\n", $time, test_num);
    read_mem_compare_a(1);
    if ( err_cnt != 0 )
    begin
      test_status = test_status + 1;
      $display( "\n\n@%t          --------- Memory read through port A unsuccessful------- \n\n", $time); 
    end
    else
      $display( "\n\n@%t          --------- Memory read through port A successful------- \n\n", $time); 
  end // flaghold

     $display ("\n#######################################################################");
  test_num = 5;
    $display( "\n\n@%t TEST: %d --------- Memory  write through port A------- \n\n", $time, test_num);
    write_mem_a(1);

     $display ("\n#######################################################################");
   test_num = 6;
     $display( "\n\n@%t TEST: %d --------- Memory  read through port A ------- \n\n", $time, test_num);
     read_mem_compare_a(1);
     if ( err_cnt != 0 )
        begin
           test_status = test_status + 1;
           $display( "\n\n@%t ERROR_MODEL: --------- Memory  read through port A Operation unsuccessful------- \n\n", $time);
        end
    else
    $display( "\n\n@%t          --------- Memory  read through port A Operation successful------- \n\n", $time);

    #10;
    $display( "\n\n@%t TEST: %d --------- Memory test done ---------- \n\n", $time, test_num);
if ( synthflagrtl ) begin

    $display ("\n#######################################################################");
  test_num = 7;
    $display( "\n\n@%t TEST: %d -----Going to test Model for all RM settings   ---- \n\n", $time, test_num);
    @(negedge CLK)
    @(negedge CLK);
    ADR = 0;
    $display("@%t    Writing 0 at %b", $time,ADR);
    write_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Writing 16'b1111111111111111 at %b", $time,ADR);
    write_mem_a_loc(6'b1, 16'b1111111111111111);
    @(negedge CLK)
    RME = 1'b0;

    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd0 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd0;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd1 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd1;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd2 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd2;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd3 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd3;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd4 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd4;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd5 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd5;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd6 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd6;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd7 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd7;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd8 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd8;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd9 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd9;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd10 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd10;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd11 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd11;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd12 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd12;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd13 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd13;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd14 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd14;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd15 external setting with RME = 1'b0  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd15;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    @(negedge CLK)
    RME = 1'b1;
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd0 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd0;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd1 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd1;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd2 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd2;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd3 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd3;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    $display( "\n\n@%t TEST: %d -----Going to test Model for RM = 4'd4 external setting with RME = 1'b1  ---- \n\n", $time, test_num);
    @(negedge CLK)
    RM = 4'd4;
    ADR = 0;
    $display("@%t    Reading 0 at %b", $time,ADR);
    read_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)
    ADR = 1;
    $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
    read_mem_a_loc(6'b1, 16'b1111111111111111);
    @(negedge CLK)
     RM = 4'b0010;
    #150;
    @(negedge CLK)
    RME = 1'b0;

    $display ("\n#######################################################################");
  test_num = 8;
    chk_test10;
    write_mem_a(1);
    read_mem_compare_a(1);
   end
   if ( flagrtl )
   begin

   $display ("\n#######################################################################");
  test_num = 9;
   $display( "\n\n@%t TEST: %d --- X handling of ME in (Read Mode) --- \n\n", $time, test_num);
   write_mem_a(1);
   @(negedge CLK) 
     ME = 1'bx;
     WE = 1'b0;
   @(posedge CLK)
   begin
     #0.39
     if (Q_BEHAV !== 16'bx)
     begin
       err_cnt = err_cnt + 1;
      $display ("ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = 16'bx at time %t  ",ADR, Q_BEHAV, $time);
      $display ("\n@%t            FAIL\n", $time);
     end
   end
   if ( err_cnt == 0)
   begin
     $display ("\n@%t            Invalid ME puts X on output", $time);  
     $display ("\n@%t            PASS\n", $time);
   end 
   else
   begin
     test_status = test_status + 1;
     $display ("\n@%t            ERROR_MODEL:Invalid ME couldn't puts X on output", $time);              
     $display ("\n@%t            FAIL\n", $time);
   end 

   if (flag_ignore_read_addx == 1)
   begin // flag_ignore_read_addx
     read_mem_compare_a_X;
     if ( err_cnt == 0)
     begin
      $display ("\n@%t            Invalid ME corrupts entire memory", $time);  
      $display ("\n@%t            PASS\n", $time);
     end 
     else
     begin
       test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid ME does not corrupt memory", $time);              
      $display ("\n@%t            FAIL\n", $time);
     end 
  end // flag_ignore_read_addx

  write_mem_a(1);
  read_mem_compare_a(1);
  @(negedge CLK) 
  ADR = 0;
  ME = 0;

  $display ("\n#######################################################################");
  test_num = 10;
   $display( "\n\n@%t TEST: %d --- X handling of ME in (Write Mode) --- \n\n", $time, test_num);
    write_mem_a(1);
    @(negedge CLK) 
    begin
      ME = 1'bx;
      WE = 1'b1;
    end
    @(posedge CLK)
    begin
      #0.39
     if (Q_BEHAV === 16'bx)
     begin
      err_cnt = err_cnt + 1;
     $display ("ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = 16'bx at time %t  ",ADR, Q_BEHAV, $time);
     $display ("\n@%t            FAIL\n", $time);
     end
   end
   if ( err_cnt == 0)
   begin
    $display ("\n@%t            Invalid ME couldn't puts X on output", $time);  
    $display ("\n@%t            PASS\n", $time);
   end 
   else
   begin
     test_status = test_status + 1;
    $display ("\n@%t            ERROR_MODEL:Invalid ME puts X on output", $time);              
    $display ("\n@%t            FAIL\n", $time);
   end 

   #10;
   ME = 1'b1;
   WE = 1'b0;
     read_mem_compare_a_X;
     if ( err_cnt == 0)
     begin
      $display ("\n@%t            Invalid ME corrupts entire memory", $time);  
      $display ("\n@%t            PASS\n", $time);
     end 
     else
     begin
       test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid ME does not corrupt memory", $time);              
      $display ("\n@%t            FAIL\n", $time);
     end 
  write_mem_a(1);
  read_mem_compare_a(1);
  @(negedge CLK) 
  ADR = 0;
  ME = 0;

  $display ("\n#######################################################################");
  test_num = 11;
  $display( "\n\n@%t TEST: %d --- X handling of ADR in (Read Mode) --- \n\n", $time, test_num);
   write_mem_a(1);
   @(negedge CLK) 
     begin
       ME = 1'b1;
       ADR = 6'bx1;
       WE = 1'b0;
     end
   @(posedge CLK)
   #5;
   WE = 1'b0;
   @(posedge CLK)
     begin
       #0.39
       if (Q_BEHAV !== 16'bx)
         begin
           err_cnt = err_cnt + 1;
           $display ("ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = 16'bx at time %t  ",ADR, Q_BEHAV, $time);
           $display ("\n@%t            FAIL\n", $time);
         end
     end
   if ( err_cnt == 0)
     begin
       $display ("\n@%t            Invalid Address puts X on output", $time);  
       $display ("\n@%t            PASS\n", $time);
     end 
   else
     begin
       test_status = test_status + 1;
       $display ("\n@%t            ERROR_MODEL:Invalid Address couldn't puts X on output", $time);              
       $display ("\n@%t            FAIL\n", $time);
     end 
 if (flag_ignore_read_addx)
  begin
    read_mem_compare_a_X;
    if ( err_cnt == 0)
      begin
        $display ("\n@%t            Invalid Address corrupts entire memory", $time);  
        $display ("\n@%t            PASS\n", $time);
      end 
    else
      begin
         test_status = test_status + 1;
        $display ("\n@%t            ERROR_MODEL: Invalid Address does not corrupt memory", $time);              
        $display ("\n@%t            FAIL\n", $time);
      end 
    #10; 
  end
    write_mem_a(1);
    read_mem_compare_a(1);
    @(negedge CLK) 
    ADR = 0;


   $display ("\n#######################################################################");
  test_num = 12;
   $display( "\n\n@%t TEST: %d --- X handling of ADR in (Write mode)  --- \n\n", $time, test_num);
    @(negedge CLK) 
    begin
      ME = 1'b1;
      ADR = 6'bx1;
      WE = 1'b1;
    end
    @(posedge CLK)
    #5;
    ADR = 6'b01;
    WE = 1'b0;
    read_mem_compare_a_X;
    if ( err_cnt == 0)
     begin
      $display ("\n@%t            Invalid Address corrupts entire memory", $time);  
      $display ("\n@%t            PASS\n", $time);
     end 
    else
     begin
       test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid Address does not corrupt memory", $time);              
      $display ("\n@%t            FAIL\n", $time);
     end 
    #10; 
   write_mem_a(1);
   $display ("\n#######################################################################");
  test_num = 13;
   $display( "\n\n@%t TEST: %d --- X handling of TEST1 in (Write mode)  --- \n\n", $time, test_num);
    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = 0;
      #10;
      TEST1 = 1'bx;
      WE = 1'b1;
    end
    @(negedge CLK)
    WE = 1'b0;
    #5;
    TEST1 = 1'b0;
    ADR = 6'b0;
    read_mem_a_CL(6'd0, 16'dx);
    if ( err_cnt == 0)
    begin
      $display ("\n@%t            Invalid TEST1 corrupts current location of memory", $time);
      $display ("\n@%t            PASS\n", $time);
    end
    else
    begin
      test_status = test_status + 1;
      $display ("\n@%t            ERROR_MODEL: Invalid TEST1 does not corrupt location of memory", $time);
      $display ("\n@%t            FAIL\n", $time);
    end
   write_mem_a(1);
   $display ("\n#######################################################################");
  test_num = 14;
   $display( "\n\n@%t TEST: %d --- X handling of TEST1 in (Read mode)  --- \n\n", $time, test_num);
    @(negedge CLK)
    begin
      ME = 1'b1;
      ADR = 0;
      #10;
      TEST1 = 1'bx;
      WE = 1'b0;
    end
    @(posedge CLK)
    begin
      #0.39;
      if (Q_BEHAV !== 16'bx)
      begin
         test_status = test_status + 1;
        $display ("\n@%t            ERROR_MODEL: Invalid TEST1 does not output X in Read Mode", $time);
        $display ("\n@%t            FAIL\n", $time);
      end
      else
      begin
        $display ("\n@%t            Invalid TEST1 outputs X in Read Mode", $time);
        $display ("\n@%t            PASS\n", $time);
      end
    end
    @(posedge CLK)
    #5;
    TEST1 = 1'b0;
    ADR = 6'b0;
   end // flagrtl

//  START OF TESTS WHEN CLOCKS ARE SIMULTANEOUS





   simul_clk = 0;
  $display ("\n#######################################################################");
    test_num = 15 ;
    $display("\n\n@%t TEST: %d ---- Test for bank assuming LSB or MSB of address is bank bit -----\n\n", $time , test_num );
    @(negedge CLK)
    ADR = 0;
    $display("@%t    Writing 0 at %b", $time,ADR);
    write_mem_a_loc(ADR, 16'd0);
    @(negedge CLK)
    ADR[0] = 1;
    $display("@%t    Writing 16'b1111111111111111 at %b", $time,ADR);
    write_mem_a_loc(ADR, 16'b1111111111111111);
    @(negedge CLK)
    ADR[5] = 1;
    $display("@%t    Writing 16'b1010101010101010 at %b", $time,ADR);
    write_mem_a_loc(ADR, 16'b1010101010101010);
    @(negedge CLK)
    ADR[0] = 0;
    $display("@%t    Writing 16'b0101010101010101 at %b", $time,ADR);
    write_mem_a_loc(ADR, 16'b0101010101010101);

    @(negedge CLK)
    ME = 1'b1;
    ADR = 0;
    WE = 1'b0;
    $display("@%t    Reading 0 at %b", $time,ADR);
     @(posedge CLK)
     #0.39
     if (Q_BEHAV == 16'b0)
     begin
      $display ("\n@%t     PASS\n", $time);
      $display ("\n@%t     Read correct data\n", $time);
     end
     else
     begin
       test_status = test_status + 1;
      $display ("\n@%t     FAIL\n", $time);
     end

     @(negedge CLK)
     ADR[0] = 1;
     $display("@%t    Reading 16'b1111111111111111 at %b", $time,ADR);
     @(posedge CLK)
     #0.39
     if (Q_BEHAV == 16'b1111111111111111)
     begin
      $display ("\n@%t     PASS\n", $time);
      $display ("\n@%t     Read correct data\n", $time);
     end
     else
     begin
       test_status = test_status + 1;
      $display ("\n@%t     FAIL\n", $time);
     end


     @(negedge CLK)
     ADR[5] = 1;
     $display("@%t    Reading 16'b1010101010101010 at %b", $time,ADR);
     @(posedge CLK)
     begin
        #0.39
        if (ADR > 64 -1)
        begin
          if (Q_BEHAV === 16'bx)
          begin
           $display ("\n@%t     PASS\n", $time);
           $display ("\n@%t     Read correct data\n", $time);
          end
          else
          begin
            test_status = test_status + 1;
           $display ("\n@%t     FAIL\n", $time);
          end
        end // end of if (ADR > 64 -1)
        else
        begin
          if (Q_BEHAV == 16'b1010101010101010)
          begin
           $display ("\n@%t     PASS\n", $time);
           $display ("\n@%t     Read correct data\n", $time);
          end
          else
          begin
            test_status = test_status + 1;
           $display ("\n@%t     FAIL\n", $time);
          end
        end
     end // end of @(posedge CLK)
   
     @(negedge CLK)
     ADR[0] = 0;
     $display("@%t    Reading 16'b0101010101010101 at %b", $time,ADR);
     @(posedge CLK)
     #0.39
     if (Q_BEHAV == 16'b0101010101010101)
     begin
      $display ("\n@%t     PASS\n", $time);
      $display ("\n@%t     Read correct data\n", $time);
     end
     else
     begin
       test_status = test_status + 1;
      $display ("\n@%t     FAIL\n", $time);
     end

    @(negedge CLK)
    ME = 1'b0;
    $display("@%t    Disable memory enable for 4 cycles. Output should not change", $time);
    @(negedge CLK)
    ADR = 0;
    $display(" Address is %b now ",ADR);
    @(negedge CLK)
    ADR[0] = 1;
    $display(" Address is %b now ",ADR);
    @(negedge CLK)
    ADR[5] = 1;
    $display(" Address is %b now ",ADR);
    @(negedge CLK)
    ADR[0] = 0;
    $display(" Address is %b now ",ADR);
    @(negedge CLK)
    ME = 1'b1;
    if (!synthflagrtl) 
      begin
        $display ("\n#######################################################################");
        test_num = 16;
        $display( "\n\n@%t TEST: %d ------- Memory Disabled tests For Ikos Model ---------- \n\n", $time, test_num);

        write_mem_a_loc(6'b0, 16'd0);
        @(negedge CLK)
        ADR = 1'b0;
        ME = 1'b1;
        WE = 1'b0;
          
        @(negedge CLK)
        @(negedge CLK)
        ME = 1'b0;

        @(negedge CLK)
        @(negedge CLK)
        @(negedge CLK)
        write_mem_a_loc(6'b0, 16'd1);
        @(posedge CLK)
        #0.39
        if(Q_BEHAV !== 16'd1 )
          begin
            test_status = test_status + 1;
            $display ("\n@%t            FAIL\n", $time);
            $display ("\n ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV, 16'd0, $time);
         end
        else 
        begin 
          $display ("\n@%t     ****** PASS\n", $time);
          $display ("\n@%t     Memory Disabled Test Pass\n", $time);
        end
    @(negedge CLK)
      ADR = 6'd2 ;
    end // of synthflagrtl


        $display ("\n#######################################################################");
        test_num = 17;
    $display( "\n\n@%t TEST: %d --------- Test Vectors For Code Coverage ------- \n\n", $time, test_num);

    @(negedge CLK);
      force top_behav.uut.mes_all_valid = 0;

    @(negedge CLK);
    @(negedge CLK);
    simul_clk = 1;
    @(negedge CLK);
     ADR = 0;
     ME = 1;
     WE = 1;
     D = 16'b1111111111111111;
    @(negedge CLK);
    @(negedge CLK);
    simul_clk = 0;
    @(negedge CLK);
     ADR = 63;
     D = ~ 16'b0101010101010101;

    @(negedge CLK);
     D = ~ D;

    @(negedge CLK);
     D = 16'b1010101010101010;
     for ( ri = 0; ri < 2; ri = ri + 1 ) begin
      for ( rj = 0; rj < 2; rj = rj + 1 ) begin
       @(negedge CLK);
        {WE,ME} = {sdata[ri],sdata[rj]};
        for ( ld = 0; ld < 2; ld = ld + 1 ) begin
         @(negedge CLK);
           D = {16{sdata[ld]}};
        end // end of for inner loop
      end // end of for inner loop
     end // end of for loop
     @(negedge CLK);
      {WE,ME} = {sdata[0],sdata[0]};
        $display ("\n#######################################################################");
        test_num = 18;
        $display( "\n\n@%t TEST: %d ------- Change of Signals in High Phase of CLK ---------- \n\n", $time, test_num);

       @(posedge CLK);
       #10
        D = 16'b0;
        ADR = 6'b0;
        TEST1 = 1'b0;
       @(posedge CLK);
        #10
        RME = 1'b1;
       @(posedge CLK);
        #10
        RM = 4'd1;
       @(posedge CLK);
        #10
        RM = 4'd0;
       @(posedge CLK);
        #10
        RME = 1'b0;
       @(posedge CLK);
       #10
        D = 16'b1111111111111111;
        ADR = 6'd1;
       @(posedge CLK);
       #10
        TEST1 = 1'b1;
     @(negedge CLK);
      {WE,ME} = {sdata[0],sdata[0]};

       @(negedge CLK);
        D = 16'b0;
        ADR = 6'b0;
        TEST1 = 1'b0;
       @(negedge CLK);
       write_mem_a(1);
       @(negedge CLK);
       @(negedge CLK);

     @(negedge CLK);
     ADR = 63;
     D = 16'b0;
     @(negedge CLK);
     ADR = 6'b0;
        $display ("\n#######################################################################");
        test_num = 19;
        $display( "\n\n@%t TEST: %d ------- Test to Test TEST1 = 1 During High Phase of CLOCK---------- \n\n", $time, test_num);

    @(negedge CLK)
         ME = 1'b1;
    @(negedge CLK)
    write_mem_a_loc(6'b0, 16'd0);

    @(negedge CLK)
    @(posedge CLK)
     #5;
    TEST1 = 1'b1;
    @(negedge CLK)
     #5;
    TEST1 = 1'b0;
    @(negedge CLK)
    @(negedge CLK)
     WE = 1'b1;
    @(negedge CLK)
    @(posedge CLK)
     #5;
    TEST1 = 1'b1;
     #0.39
     if (Q_BEHAV !== 16'bx)
     begin
     test_status = test_status + 1;
      $display ("ERROR_MODEL: Mismatch observed at ADR %d, simulated value = %h, expected value = 16'bx at time %t  ",ADR, Q_BEHAV, $time);
      $display ("\n@%t            FAIL\n", $time);
     end
   else
   begin
     $display ("\n@%t            Invalid TEST1 transition during high phase of CLOCK puts X on output", $time);
     $display ("\n@%t            PASS\n", $time);
   end
    @(negedge CLK)
     WE = 1'b0;
    #5;
    TEST1 = 1'b0;
    @(negedge CLK)
    write_mem_a_loc(6'd1, 16'd0);
    @(negedge CLK)
    ADR = 6'd0;
    WE = 1'b0;
    @(negedge CLK)
    @(posedge CLK)
     #0.39
     if (Q_BEHAV !== 16'bx)
     begin
     test_status = test_status + 1;
     $display ("\n@%t  ERROR_MODEL:   Invalid TEST1 transition during high phase of CLOCK doesn't  corrupts the current location ", $time);
      $display ("\n@%t            FAIL\n", $time);
     end
    @(negedge CLK)
    write_mem_a_loc(6'b0, 16'd0);
    @(negedge CLK)


      release top_behav.uut.mes_all_valid;
   `ifdef code_coverage
    @(negedge CLK);
       top_behav.uut.mem_fault_array_XOR[1] = 16'b1;
       write_mem_a_loc(6'd1, 16'd0);
    @(negedge CLK);
       read_mem_a_loc(6'd1, 16'd1);
    @(negedge CLK);
       write_mem_a_loc(6'd1, 16'd1);
    @(negedge CLK);
       read_mem_a_loc(6'd1, 16'd0);
   `endif

    $display( "\n\n@%t TEST:  --------- All Memory test over ---------- \n\n", $time);
    $display("\n####################################################################################");
    $display("\n                    ********** TEST SUMMARY **********\n");
    $display("\n1.  No. of test_status Errors is  %d", test_status);
    $display("\n2.  Please check ERROR_MODEL messages in the log file");
    $display("    for the cause of test_status Errors");
    $display("\n3.  Please check OP in the log file for any mismatch");
    $display("    between  verilog and vhdl memory model!\n");
    $display("\n####################################################################################");


#1000 $finish;
end//initial


task operationAB;

    input [ 7:0] operA;
    input [ 5:0] startA, incA;
    input [ 15:0] dataA;
    input [ 7:0] operB;
    input [ 5:0] startB, incB;
    input [ 15:0] dataB;
    integer i, j;
    reg [ 5:0] highA;
    reg [ 5:0] highB;
    reg [ 6:0] max_limit;

    begin
        @(posedge CLK);
        #5;
        D = dataA;
        ADR = startA;
        if( startA < startB) begin
            highA = startB - 1;
            highB = 63;
        end
        else if( startA > startB) begin
            highA = 63;
            highB = startA - 1;
        end
        else begin
            highA = 63;
            highB = 63;
        end
        if( ( highA - startA + 1) > ( highB - startB + 1))
            max_limit = ( highA - startA );
        else
            max_limit = ( highB - startB );

        @(negedge CLK) begin
            if( operA == "w")
                WE = 1'b1;
        end

        for(i = 0; i <= max_limit; i = i + incA) fork  // Run Address Scan
            @(negedge CLK) begin
                if( operA == "w")
                    WE = 1'b1;
            end
            @(posedge CLK) begin
                #0.39
                if ( operA == "r") begin
                   if( Q_BEHAV !== dataA) begin
                        test_status = test_status + 1;
                       $display( $time, , "ERROR_MODEL: operationAB QA problem at address=%b got=%b expected=%b", ADR, Q_BEHAV, dataA);
                       $display ("\n@%t            FAIL\n", $time);
                   end
                end
                if( operA == "w")
                    WE = 1'b0;
                if( ADR != highA)
                    ADR = ADR + incA;
            end
        join//for

        #10;
        ADR = 6'b0;
        D = 16'b0;
        WE = 1'b0;
        #100;
    end//begin
endtask


task chk_rm0;
 begin
   $display( "\n\n@%t TEST: %d --------- RM test ---------- \n\n", $time, test_num);
   @(negedge CLK) begin
    RM = 4'bx ;
    end
   @(posedge CLK) begin
     if ( flagrtl )
     #0.39;
     else 
     #0.332;
    if ( Q_BEHAV !== 16'bx) begin
     test_status = test_status + 1;
     $display("\n\n@%t  ERROR_MODEL: RM Operation unsuccessful\n\n", $time);
     $display ("\n@%t            FAIL\n", $time);
    end
    else
      begin
     $display("\n\n@%t 		RM Operation successful \n\n", $time);
     $display ("\n@%t            PASS\n", $time);
     end
   end
   #10;
     RM = 4'b0010;
 end
endtask

task chk_test10;
reg [15:0]  data_in_mem;
 begin
    $display( "\n@%t TEST: %d --- GOING TO CHECK TEST1 FUNCTIONALITY ---", $time, test_num);
    write_mem_a(1);
    ME = 1'b1;
    
    @(negedge CLK);
      #0.491;
    TEST1 = 1'b1;
    data_in_mem = 0;
    for(temp_addr = 0; temp_addr < 63; temp_addr = temp_addr + 1)
    begin
      @(negedge CLK);
      ADR = temp_addr;
      @(posedge CLK);

      #0.332;

      if (Q_BEHAV !== 16'bx)
      begin
        err_cnt = err_cnt + 1;
        $display ("\n ERROR_MODEL:FOR X: Mismatch observed at ADR %d, simulated value = %h, expected value = 16'bx at time %t  ",ADR, Q_BEHAV, $realtime);
      end

      @(negedge CLK);
      #0.39
      if (Q_BEHAV !== data_in_mem)
      begin
        err_cnt = err_cnt + 1;
        test_status = test_status + 1;
        $display ("\n ERROR_MODEL: FOR VALID VALUE:Mismatch observed at ADR %d, simulated value = %h, expected value = %h at time %t  ",ADR, Q_BEHAV,data_in_mem, $realtime);
      end
      data_in_mem = data_in_mem + 1;
      if (data_in_mem > 16'b1111111111111111) data_in_mem = 0;    
    end // end of for

    if (err_cnt == 0)
       $display ("\n@%t   PASS   * ON ENABLING TEST1,X OBSERVED AT posedge of CLK and DATA OBSERVED AT negedge of CLK",$time);
    else
    begin
      test_status = test_status + 1;
      $display ("\n@%t   FAIL   * ON ENABLING TEST1, X Couldn't BE OBSERVED AT posedge of CLK and  DATA Couldn't BE OBSERVED AT negedge of CLK",$time);
    end

    ME = 1'b0;
      #0.491;
    TEST1 = 1'b0;
 end
endtask




endmodule
